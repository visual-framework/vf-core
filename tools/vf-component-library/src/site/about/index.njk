---
is_index: true
title: About the Visual Framework
subtitle: Tailored for life science websites.
date: 2018-08-22 12:24:50
section: about
order: 1
tags:
  - about
  - sections
layout: layouts/base.njk
---

{% render '@vf-intro', {
  "vf_intro_heading": title,
  "vf_intro_lede": siteConfig.siteInformation.short_description,
  "vf_intro_subheading": "",
  "vf_intro_text": [
    'The Visual Framework (VF) is designed with the <a href="https://blogs.embl.org/communications/2018/09/12/faster-scientific-websites-through-reusability" class="vf-link">needs of life science websites and services</a>. It goes beyond guidance for tables, graphs, data-heavy typography and focuses on being sane defaults and implements its CSS in a way that will not interfere with your existing components that use Bootstrap, Angular, or something else.'
  ],
  "vf_intro_badge": false
} %}

<section class="vf-content | embl-grid embl-grid--has-centered-content">
<div></div>
<div>

{% markdown %}

## {{ subtitle }}

<!-- This content is styled using the .vf-content component, intended for use
     where the application of classnames is difficult, such as Markdown text
     or WYSIWYG editors -->

**Clarity** through a default and look suitable to life science websites. It builds atop solid UX principles to increase comprehension and decrease [cognitive load](https://www.google.com/search?q=cognitive+load+software+usability). Just because the scientific material is challenging, it doesn't mean using the website [needs to be](https://theoutline.com/post/2954/user-interface-designers-are-horrified-by-hawaii-s-missile-alert-system).

**Flexibility** to be fully theme-able, replaceable and adaptable to any aesthetic or functional needs.

**Compatibility** as the VF won't break your other framework's CSS or JS, so bring Bootstrap, Foundation, React or Angular. With the VF  components (and brand design) can be shared between sites without cross-contaminating other functionality. We achieve this by a [CSS Modules-style](https://github.com/css-modules/css-modules) approach:

  - CSS: styling on HTML elements and only use namespaced classes, that is:
    - Not this: `.button {}` or `button {}` or `div.button {}`
    - Like this: `.vf-button {}`
  - JavaScript: Use ours or bring your own. We use minimal JS in components and it's fully optional (just remove [the JavaScript selectors](https://github.com/visual-framework/vf-core/issues/115#issuecomment-455524131)). If you'd rather use Angular or Bootstrap for your tabs, the Visual Framework won't get in the way, just remove `data-vf-js-tabs` from your markup.

**Componentisation** to use only the portions you need. Use `vf-core` to build your CSS, JS dynamically based on the components you need, or bring your own build system or components.

[Learn how to do all this on the getting started page]({{ '/building/' | url }})

---

### Principles

1. Not lock you into a particular brand look and feel
2. Be useful to many organisations
3. Be mindful of constraints and use cases common for life science content and data
4. Be compatible with a variety of frontend solutions
5. Be modular and extensible

We ensure we remain true to these through [a consultation process]({{ '/about/consultation/' | url }}).

{% endmarkdown %}

</div>
</section>
