---
title: Principles
subtitle:
date: 2021-02-02 13:29:50
is_index: false
section: about
order: 1
tags:
  - about
  - design principles
  - sections
layout: layouts/base.njk
---

{% render '@vf-intro', {
  "vf_intro_heading": title,
  "vf_intro_subheading": "",
  "vf_intro_lede": "",
  "vf_intro_text": [
    'Rocket fuel through sane defaults and technical flexibility.'
  ],
  "vf_intro_badge": false
} %}


<section class="embl-grid embl-grid--has-centered-content">
  <div class="vf-section-header" id="Principles">
    {# <h2 class="vf-section-header__heading">Principles</h2> #}
  </div>
  <div class="vf-content">

{% markdown %}

**Clarity** through a default and look suitable to life science websites. It builds atop solid UX principles to increase comprehension and decrease [cognitive load](https://www.google.com/search?q=cognitive+load+software+usability). Just because the scientific material is challenging, it doesn't mean using the website [needs to be](https://theoutline.com/post/2954/user-interface-designers-are-horrified-by-hawaii-s-missile-alert-system).

**Flexibility** to be fully theme-able, replaceable and adaptable to any aesthetic or functional needs.

**Compatibility** as the VF won't break your other framework's CSS or JS, so bring Bootstrap, Foundation, React or Angular. With the VF  components (and brand design) can be shared between sites without cross-contaminating other functionality. We achieve this by a [CSS Modules-style](https://github.com/css-modules/css-modules) approach:

  - CSS: styling on HTML elements and only use namespaced classes, that is:
    - Not this: `.button {}` or `button {}` or `div.button {}`
    - Like this: `.vf-button {}`
  - JavaScript: Use ours or bring your own. We use minimal JS in components and it's fully optional (just remove [the JavaScript selectors](https://github.com/visual-framework/vf-core/issues/115#issuecomment-455524131)). If you'd rather use Angular or Bootstrap for your tabs, the Visual Framework won't get in the way, just remove `data-vf-js-tabs` from your markup.

**Componentisation** to use only the portions you need. Use `vf-core` to build your CSS, JS dynamically based on the components you need, or bring your own build system or components.

We ensure we remain true to these through [a consultation process]({{ '/about/consultation/' | url }}).

<a href="/building" class="vf-button vf-button--primary">Get started building</a>

{% endmarkdown %}


  </div>
</section>
