---
title: Creating a new component
subtitle: This codebase includes a folder and file creation tool.
intro: It allows you to quickly create all the required files to make a component -- it gives you the option to create am element, block, or container.
date: 2019-04-09 12:24:50
layout: layouts/developing.njk
order: 1
---

1. Install Yeoman
   - If you've come this far and you don't have `yo`, you should be able to install it with `yarn global add yo@latest`
   - If you get stuck, [see the official install guide](http://yeoman.io/codelab/setup.html)
1. Create a new component
   - Run [`vf-component-generator`](https://www.npmjs.com/package/@visual-framework/vf-component-generator) and answer the questions when prompted.
       - **Type of component:** We use a variation of the atomic design methodology, [read about the differences here](http://bradfrost.com/blog/post/atomic-web-design/#atoms). We use: elements, blocks, and containers.
           - an element would be a heading, or a button
           - a block would be a teaser, or a search form
           - a container would be a group of teasers
       - **Name of component:** Go for something simple and obvious (todo: we need a guide/documentation on how we name things). Don't worry about namespacing and prefixing, the tooling will take care of this.
       - **NPM package:** If you're making something interesting (probably not an 'element'), then saying 'yes' will allow the component to be shared as an optional part of the framework on NPM.
    - Your customised template component will is in the `/components` directory.
1. Add the `@import 'vf-your-component.scss';` to `/assets/scss/styles.scss`.
1. Developing your component
   - Edit your template files in the `/components/your-component-name` folder
       - For further guidance on component configuration, [consult the comments in the component template files](https://github.com/visual-framework/vf-core/tree/develop/tools/component-generator/templates).
   - Run `gulp vf-dev` to compile and preview the component
1. Sharing you component back
   - Publish it to npm; and/or
   - If you think your component is useful to the global `vf-core` community, [make a Pull Request](https://github.com/visual-framework/vf-core/pulls) or [open an issue](https://github.com/visual-framework/vf-core/issues/new/choose) to discuss.

 <div class="vf-box">
 Tip: also consult the [guidelines]({{ '/developing/guidelines' | url }}) for the naming of things and coding standards.
 </div>

 ## Language and spelling of documentation, code

 The `vf-core` project is being led by EMBL where British English and we're aware that most code is American English (`colour` vs `color`); so:

 - üìöüá¨üáß Documentation is written in British English üíÇ‚Äç `Rarely use centred text, always use colours`
 - ‚å®Ô∏èüá∫üá∏ Code is written in American english üß¢ `$vf-main-color: green;`
