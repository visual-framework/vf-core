// vf-content

@import 'package.variables.scss';
// Debug information from component's `package.json`:
// ---
/*!
 * Component: #{map-get($componentInfo, 'name')}
 * Version: #{map-get($componentInfo, 'version')}
 * Location: #{map-get($componentInfo, 'location')}
 */

// we use `not([class*='vf-'])` to ensure we only apply styling where a
// vf-* class hasn't been able to be applied

.vf-content {

  h1:not([class*='vf-']) {
    @include set-type(text-heading--1, $custom-margin-bottom: 0);

    + small {
      margin-bottom: 35px;
      margin-top: 22px;
    }
  }

  h2:not([class*='vf-']) {
    @include set-type(text-heading--2, $custom-margin-bottom: 39px);

    margin-top: 0;
    padding-top: 13px;
  }

  h3:not([class*='vf-']) {
    @include set-type(text-heading--3, $custom-margin-bottom: 13px);

    margin-top: 24px;
  }

  h4:not([class*='vf-']) {
    @include set-type(text-heading--4, $custom-margin-bottom: 13px);

    margin-top: 24px;
  }

  h5:not([class*='vf-']) {
    @include set-type(text-heading--5, $custom-margin-bottom: 13px);

    margin-top: 24px;
  }

  h6:not([class*='vf-']) {
    @include set-type(text-heading--5, $custom-margin-bottom: 13px);

    margin-top: 24px;
  }

  p:not([class*='vf-']) {
    @include set-type(text-body--2, $custom-margin-bottom: 24px);
  }
  
  .vf-link,
  a:not([class*='vf-']) {
    @include inline-link(
      $vf-link--hover-color: $vf-link--hover-color,
      $vf-link--visited-color: set-color(vf-color--purple),
      $vf-include-normalisations: true
    );
  }

  small:not([class*='vf-']) {
    @include set-type(text-body--5);

    display: block;
  }

  ol:not([class*='vf-']) {
    @include list(vf-list--ordered, ordered);
  }

  ul:not([class*='vf-']) {
    @include list(vf-list--unordered, unordered);
  }

  li:not([class*='vf-']) {
    @include set-type(text-body--2);

    margin-bottom: map-get($vf-spacing-map, vf-spacing--sm);

    > ul:not([class*='vf-']),
    > ol:not([class*='vf-']) {
      margin-top: map-get($vf-spacing-map, vf-spacing--sm);
    }
  }

  li:not([class*='vf-']):last-of-type {
    margin-bottom: map-get($vf-spacing-map, vf-spacing--md);
  }

  hr:not([class*='vf-']) {
    @include divider;
  }

  code:not([class*='vf-']) {
    background: set-color(vf-ui-color--off-white);
    padding-left: 3px;
    padding-right: 3px;
  }

  blockquote:not([class*='vf-']) {
    @include blockquote;

    p:last-of-type:not([class*='vf-']) {
      margin-bottom: 0;
    }
  }

  figcaption:not([class*='vf-']),
  cite:not([class*='vf-']) {
    // matches @mixin figure, but that is not directly usable here as it requires css classes
    @include set-type(text-body--5);
    color: map-get($vf-colors-map, vf-color--grey);
    font-style: italic;
  }

  .vf-video {
    // TODO: Make a function for vf-spacing map
    margin-bottom: 32px;
  }
}

.vf-content__standfirst {
  font-size: 21px;
  line-height: 31px;
  margin-bottom: 46px;
  margin-top: 0;

  + .vf-content__standfirst {
    margin-bottom: 24px;
  }

  + small {
    margin-bottom: 42px;
  }
}


[class*='--dark'].vf-content,
.vf-content > [class*='dark'] {
  .vf-link,
  a:not([class*='vf-']) {
    @include inline-link(
      $vf-link--dark-mode--hover-color,
      $vf-link--dark-mode--hover-color,
      set-color(vf-color--purple--light),
      $vf-include-normalisations: true
    );
  }
}
